name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: "1.21"
  DOCKER_REGISTRY: "docker.io"
  IMAGE_NAME: "qibot-chatbot"

jobs:
  # 🧪 Testes e Qualidade
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 📦 Cache Go Modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 📥 Download Dependencies
      run: go mod download

    - name: 🔍 Vet Code
      run: go vet ./...

    - name: 🧪 Run Tests
      env:
        REDIS_ADDR: localhost:6379
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        go test -v -race -coverprofile=coverage.out ./tests/...
        go tool cover -html=coverage.out -o coverage.html

    - name: 📊 Upload Coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.html

    - name: 🔍 Lint with golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  # 🔨 Build
  build:
    name: 🔨 Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 🔨 Build Binary
      run: |
        CGO_ENABLED=1 go build -ldflags="-w -s" -o qibot .
        chmod +x qibot

    - name: 📦 Upload Binary
      uses: actions/upload-artifact@v3
      with:
        name: qibot-binary
        path: qibot

  # 🐳 Docker Build & Push
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔨 Build and Push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: 📝 Update README with new image
      run: |
        echo "🐳 **Latest Docker Image:** \`${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY

  # 🚀 Deploy (apenas para branches específicas)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 🚀 Deploy Notification
      run: |
        echo "🎉 Deployment seria executado aqui!" >> $GITHUB_STEP_SUMMARY
        echo "🐳 Imagem: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "📅 Deploy em: $(date)" >> $GITHUB_STEP_SUMMARY

  # 🔔 Notification
  notify:
    name: 🔔 Notify
    runs-on: ubuntu-latest
    needs: [test, build, docker, deploy]
    if: always()
    
    steps:
    - name: 📊 Pipeline Summary
      run: |
        echo "## 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "- 🧪 Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🔨 Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🐳 Docker: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🚀 Deploy: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "👤 **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "💬 **Commit:** ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
